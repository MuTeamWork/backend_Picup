spring:
  rabbitmq:
    host: 10.0.0.5
    port: 5672
    username: regulus
    password: regulus
    publisher-confirm-type: correlated
    publisher-returns: true
    template:
      receive-timeout: 30000
      reply-timeout: 50000
    exchanges:
      my-exchange:
        type: direct
        durable: true

  data:
    redis:
      # Redis数据库索引（默认为0）
      database: 0
      # Redis服务器地址
      host: 10.0.0.5
      # Redis服务器连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      # password:
      # 连接超时时间
      timeout: 10s
      lettuce:
        pool:
          # 连接池最大连接数
          max-active: 200
          # 连接池最大阻塞等待时间（使用负值表示没有限制）
          max-wait: -1ms
          # 连接池中的最大空闲连接
          max-idle: 10
          # 连接池中的最小空闲连接
          min-idle: 0

  datasource:
#   url: jdbc:mysql://10.0.0.5:3306/db_image?serverTimezone=Asia/Shanghai&useUnicode=true&characterEcoding=utf8&useSSL=false
    url: jdbc:mysql://10.0.0.5:3306/db_image?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&useSSL=false
    username: root # the username of your MySQL root
    password: regulus # the username of your MySQL admin
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      max-lifetime: 500000
      maximum-pool-size: 100
      minimum-idle: 5 #解决mysql连接不释放问题
      connection-timeout: 30000
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB
  main:
    lazy-initialization: false




mybatis-plus:
  mapper-locations: classpath:mapper/**/*.xml
  configuration:
    map-underscore-to-camel-case: true #下划线驼峰
    cache-enabled: false #二级缓存
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #开启SQL语句打印
  global-config:
    db-config:
      update-strategy: not_null #更新策略

#mybatis:
#  mapper-locations: classpath:mapper/*.xml
#  type-aliases-package: com.criticalskill.backend.entity
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#    map-underscore-to-camel-case: true

server:
  port: 8989 #the port number

logging:
  file:
    name:   ./backendlog/logs # search： find / -name 'blog' -type d  查看：tailf -n 5 logName.log
  #/home/back_end/backendlog/logs #

############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: Authentication
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 2592000
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: 2592000
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true

  isReadBody: false           # 是否尝试从 请求体 里读取 Token
  isReadHeader: true          # 是否尝试从 header 里读取 Token
  isReadCookie: true         # 是否尝试从 cookie 里读取 Token，此值为 false 后，StpUtil.login(id) 登录时也不会再往前端注入Cookie


  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: simple-uuid
  # 是否输出操作日志
  is-log: true



file-demo:
  domain: http://10.0.0.5:8989
  prefix-image: /image/
  prefix-thumbnail: /thu/
  file-thumbnail-path: /root/resource/thumbnail/
  file-image-path: /root/resource/image/

#  file-image-path: D:\springboot-study\file-demo\file\image\
#  file-thumbnail-path: D:\springboot-study\file-demo\file\thumbnail\

#  file-thumbnail-path: /home/back_end/resource/thumbnail/
#  file-image-path: /home/back_end/resource/image/



